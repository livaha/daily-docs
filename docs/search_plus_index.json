{"./":{"url":"./","title":"HOME","keywords":"","body":"sbwxffnhc的文档库 本文档库用于归纳个人前端的学习分享，及分享自己的一些开源项目。 喜欢或觉得不错的同学，记得给个星哦，您 的关注是我发奋学习的动力！ Copyright © sbwxffnhc.github.io 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-07 21:52:14 "},"SUMMARY.html":{"url":"SUMMARY.html","title":"目录","keywords":"","body":"Summary HOME 目录 gitbook教程 微信小程序 微信基础入门 微信云函开发 微信小程序电影列表demo Copyright © sbwxffnhc.github.io 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-09 23:25:27 "},"gitbook_dev/":{"url":"gitbook_dev/","title":"gitbook教程","keywords":"","body":"gitbook教程 gitbook的用途 配合使用 GitBook + Typora + Git 安装 npm install -g gitbook-cli 使用 gitbook init 生成文件 README.md —— 书籍的介绍写在这个文件里 SUMMARY.md —— 书籍的目录结构在这里配置 .md文件用Typora来编辑，可以打开当前文件夹 demo 编辑SUMMARY.md文件，内容修改为： # 目录 * [前言](README.md) * [第一章](Chapter1/README.md) * [第1节：衣](Chapter1/衣.md) * [第2节：食](Chapter1/食.md) * [第3节：住](Chapter1/住.md) * [第二章](Chapter2/README.md) 保存后在命令行再次执行 gitbook init 它会根据SUMMARY.md的索引自动生成目录 预览 gitbook serve 执行命令后会对 Markdown 格式的文档进行转换，默认转换为 html 格式，最后提示 “Serving book on http://localhost:4000”。打开浏览器： 你也可以指定端口 gitbook serve --port 9999 输出 默认快出路径为_book gitbook build 或 gitbook build [书籍路径] [输出路径] 如输出到docs文件夹 gitbook build . docs 生成其他格式电子书（如.pdf） pdf格式：gitbook pdf ./ ./mybook.pdf epub格式：gitbook epub ./ ./mybook.epub mobi格式：gitbook mobi ./ ./mybook.mobi 如果是要导出PDF，ePub或者mobi格式的电子书时，需要安装Calibre电子书阅读/管理器和命令行工具，不然可能会报错“EbookError: Error during ebook generation: 'ebook-convert'”。 Copyright © sbwxffnhc.github.io 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-07 14:07:35 "},"wechat/":{"url":"wechat/","title":"微信小程序","keywords":"","body":"微信小程序 微信小程序入门教程 小程序云开发 小程序电影项目 Copyright © sbwxffnhc.github.io 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-07 18:19:49 "},"wechat/base.html":{"url":"wechat/base.html","title":"微信基础入门","keywords":"","body":"微信小程序入门教程 小程序开发文档：https://developers.weixin.qq.com/miniprogram/dev/framework/ 开始 申请帐号 安装开发者工具 安装稳定版本 你的第一个小程序 编译预览 小程序代码构成 通过上面的文档，现在开始了解代码构成介绍 .json 后缀的 JSON 配置文件 .wxml 后缀的 WXML 模板文件 .wxss 后缀的 WXSS 样式文件 .js 后缀的 JS 脚本逻辑文件 JSON 配置 官方文档 JSON 是一种数据格式，并不是编程语言，在小程序中，JSON扮演的静态配置的角色 . 以下图为例，现在我们介绍根目录下的 app.json 和 project.config.json，和 pages/movie 目录下的movie.json 小程序配置 app.json app.json 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等 (当然，json文件并不能添加注释，使用时应按json格式来) 全局配置文档 工具配置 project.config.json 配置文档 页面配置 movie.json 这里的 movie.json其实用来表示 pages/movie目录下的movie.json` 这类和小程序页面相关的配置。 完整页面配置 WXML模板 相当于html的角色 pages/comment/comment.wxml // pages/comment/comment.wxml msg: jerry 请登陆 hidden 注释 wx:if 和 wx:else 只会显示成立的模块 hidden，如果不成立也只是隐藏而 建议：如果需要频繁切换的情景下，用'hidden' pages/comment/comment.js // pages/comment/comment.js Page({ /** * 页面的初始数据 * 相当于react的state */ data: { msg:\"hello msg\", img:'../../images/film.png', arr:['a','b','c','d'], list:[ { name:'jack', age:45 },{ name:'kiy', age:4 },{ name:'abd', age:25 } ], isLogin:true }, }) WXSS 样式 WXSS 具有 CSS 大部分的特性，小程序在 WXSS 也做了一些扩充和修改。 新增了尺寸单位。rpx:可以根据屏幕 宽度进行自适应，适配不同宽度的屏幕。 提供了全局的样式和局部样式。和前边 app.json, page.json 的概念相同，你可以写一个 app.wxss 作为全局样式，会作用于当前小程序的所有页面，局部页面样式 page.wxss 仅对当前页面生效。 此外 WXSS 仅支持部分 CSS 选择器 更详细的文档可以参考 WXSS 。 如rpx demo movie.wxml movie.wxss /* pages/movie/movie.wxss */ .box1{ width: 200px; height: 200px; background: #18b; } .box2{ width: 200rpx; height: 200rpx; background: #f00; } 区别 引入通用样式 路径为相对路径 在movie.wxss中引入 @import '../../style/common.wxss 推荐第三方样式库 WeUI, iView Weapp , Vant Weapp 页面交互JS 先看wxml中的内容 点我加1 大致效果如下图 js交互文件： // pages/movie/movie.js Page({ /** * 页面的初始数据 */ data: { count:0 }, onTapBoxHandler: function (e) { console.log('box click') console.log(e) console.log(e.target.id) }, onTapChildHandler: function () { console.log('child box click') }, onTapHandler: function () { this.setData({ count:this.data.count+1 }) }, }) 解释 点击事件是bindtap 微信的catchtap 用于阻止事件冒泡 catchtap也可以写在catch:tap 自定义属性为'data-id',即'data-xxx' Copyright © sbwxffnhc.github.io 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-07 18:43:40 "},"wechat/cloud.html":{"url":"wechat/cloud.html","title":"微信云函开发","keywords":"","body":"微信云函数基础 云开发文档 开发者可以使用云开发开发微信小程序、小游戏，无需搭建服务器，即可使用云端能力。 三大基础能力支持 云函数：获取appid,获取openid,生成分享图，调用腾讯云SDK... 云数据库：数据增加，数据删除，数据修改，数据查询... 云存储：管理文件，上传文件，下载文件，分享文件... 云开发服务设置 1 开通云开发服务 2 开通后可进入云开发控制平台 每个小程序账号可以创建2个环境，我们可以创建一个开发环境，一个生产环境，创建如下图 3 版本库设置 使用云开发功能，开发者工具基础库必须在2.2.3版本以上， 选择下图‘>>’，点击详情，设置基础库版本。 云开发能力 数据库 文档 关系型 文档型 数据库 database 数据库 database 表 table 集合 collection 行 row 记录 record / doc 列 column 字段 field 数据类型 云开发数据库提供以下几种数据类型： String：字符串 Number：数字 Object：对象 Array：数组 Bool：布尔值 GeoPoint：地理位置点 Date：时间 Null 权限管理 对一个用户来说，不同模式在小程序端和管理端的权限表现如下： 模式 小程序端 读自己创建的数据 小程序端 写自己创建的数据 小程序端 读他人创建的数据 小程序端 写他人创建的数据 管理端 读写任意数据 仅创建者可写，所有人可读 √ √ √ × √ 仅创建者可读写 √ √ × × √ 仅管理端可写，所有人可读 √ × √ × √ 仅管理端可读写：该数据只有管理端可读写 × × × × √ 使用 创建一个集合 创建成功后，可以看到 todos 集合管理界面，界面中我们可以添加记录、查找记录、管理索引和管理权限。 数据库demo wxml insert update search delete wxjs // pages/cloud/cloud.js const db = wx.cloud.database() //初始化数据库 Page({ /** * 页面的初始数据 */ data: { }, insert: function () { db.collection('user').add({ data:{ name:\"nick\", description:\"learn cloud database\", due:new Date('2019-09-09'), tags:[ \"cloud\", \"database\" ] } }).then(res=>{ console.log(res) }).catch(res=>{ console.error(res) }) }, update: function () { db.collection('user').doc('cbdb4c165cfa89bd016c1213527d8cbe').update({ data:{ name:'sbwxffnhc' } }).then(res=>{ console.log(res) }) } search: function () { db.collection('user').where({ name:'sbwxffnhc' }).get().then(res=>{ console.log(res) }).catch(res=>{ console.log(res) }) }, delete: function () { db.collection('user').doc('cbdb4c165cfa89bd016c1213527d8cbe').remove() .then(res => { console.log(res) }).catch(res => { console.log(res) }) } }) 查找： 通过自己手动创建的记录，查询不一定能找到，要通过创建权限去获得 云函数demo 要安装nodejs 求和函数sum() 获取当前用户的openid 批量删除云函数库的数据 开始第一个云函数 文档 1 项目根目录找到 project.config.json 文件 指定本地已存在的目录作为云函数的本地根目录 示例： { \"cloudfunctionRoot\": \"cloudfunctions/\" } 2 在云函数根目录上右键，在右键菜单中，可以选择创建一个新的 Node.js 云函数，我们将该云函数命名为 add。 修改云函数代码并返回给调用端 exports.main = async (event, context) => { return { sum: event.a + event.b } } 修改完后在云函数目录上右键，在右键菜单中，我们可以将云函数整体打包上传并部署到线上环境中。 部署完成后，我们可以在小程序中调用该云函数： wx.cloud.callFunction({ // 云函数名称 name: 'add', // 传给云函数的参数 data: { a: 1, b: 2, }, }) .then(res => { console.log(res.result) // 3 }) .catch(console.error) 那么到这里，我们就成功创建了我们的第一个云函数，并在小程序中成功调用！ 获取小程序用户信息 云开发的云函数的独特优势在于与微信登录鉴权的无缝整合。当小程序端调用云函数时，云函数的传入参数中会被注入小程序端用户的 openid，开发者无需校验 openid 的正确性，因为微信已经完成了这部分鉴权，开发者可以直接使用该 openid。与 openid 一起同时注入云函数的还有小程序的 appid。 去函数默认的函数模板： // 云函数入口文件 const cloud = require('wx-server-sdk') cloud.init() // 云函数入口函数 exports.main = async (event, context) => { const wxContext = cloud.getWXContext() return { event, openid: wxContext.OPENID, appid: wxContext.APPID, unionid: wxContext.UNIONID, } } 在小程序端调用： getopenid: function () { wx.cloud.callFunction({ name: 'openid', }) .then(res => { console.log(res) }) .catch(console.error) }, 通过云函数批量删除数据 云函数delete // 云函数入口文件 const cloud = require('wx-server-sdk') cloud.init() const db=cloud.database(); // 云函数入口函数 exports.main = async (event, context) => { try{ return await db.collection('user').where({ name: 'nick' }).remove(); } catch(e){ console.error(e) } } 小程序端调用 delete: function () { wx.cloud.callFunction({ name: 'delete' }) .then(res => { console.log(res) }) .catch(console.error) }, Copyright © sbwxffnhc.github.io 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-09 23:24:39 "},"wechat/movie.html":{"url":"wechat/movie.html","title":"微信小程序电影列表demo","keywords":"","body":"微信小程序电影列表demo Copyright © sbwxffnhc.github.io 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-07 14:07:35 "}}